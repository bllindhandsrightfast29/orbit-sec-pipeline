name: ORBIT-SEC Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      # CHECKOUT CODE
      - name: Checkout code
        uses: actions/checkout@v4

      # SETUP PYTHON ENVIRONMENT
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # INSTALL DEPENDENCIES (for context)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: true

      # AEGIS - TRIVY FILESYSTEM SCAN (Dependencies)
      - name: Run Trivy vulnerability scanner (Filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'table'
          exit-code: '1'
          output: 'trivy-results.txt'

      # HELIOS - GENERATE TRIVY HTML REPORT
      - name: Generate Trivy HTML report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-report.html'
        if: always()
        continue-on-error: true

      # AEGIS - TRIVY IAC SCAN (Terraform)
      - name: Run Trivy IaC scanner for Terraform
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform/'
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'table'
          exit-code: '1'
          output: 'trivy-iac-terraform.txt'
        continue-on-error: true

      # AEGIS - TRIVY IAC SCAN (Kubernetes)
      - name: Run Trivy IaC scanner for Kubernetes
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'kubernetes/'
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'table'
          exit-code: '1'
          output: 'trivy-iac-k8s.txt'
        continue-on-error: true

      # AEGIS - TRIVY CONFIG SCAN (Dockerfile)
      - name: Run Trivy config scanner for Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          format: 'table'
          exit-code: '0'
        continue-on-error: true

      # AEGIS - CHECKOV IAC SCAN
      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes
          quiet: false
          soft_fail: true
          output_format: cli
          output_file_path: checkov-report.txt

      # AEGIS - GITLEAKS SECRET SCAN
      - name: Run Gitleaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # BUILD DOCKER IMAGE
      - name: Build Docker image
        run: |
          docker build -t orbit-sec:${{ github.sha }} .
          docker tag orbit-sec:${{ github.sha }} orbit-sec:latest

      # AEGIS - TRIVY IMAGE SCAN (Container Vulnerabilities)
      - name: Run Trivy image scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'orbit-sec:latest'
          severity: 'CRITICAL,HIGH'
          format: 'table'
          exit-code: '1'
          output: 'trivy-image-results.txt'

      # HELIOS - GENERATE TRIVY IMAGE HTML REPORT
      - name: Generate Trivy image HTML report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'orbit-sec:latest'
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-image-report.html'
        if: always()
        continue-on-error: true

      # HELIOS - UPLOAD SECURITY REPORTS
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.txt
            trivy-report.html
            trivy-image-results.txt
            trivy-image-report.html
            trivy-iac-terraform.txt
            trivy-iac-k8s.txt
            checkov-report.txt
          retention-days: 30

      # HELIOS - CREATE STATUS SUMMARY
      - name: Create scan status summary
        if: always()
        run: |
          echo "## ORBIT-SEC Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Components Executed:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Apollo**: Pipeline orchestration" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Aegis**: Security gate (Trivy + Gitleaks + Container scan)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Helios**: Report generation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Dependency vulnerabilities (requirements.txt)" >> $GITHUB_STEP_SUMMARY
          echo "- üîê Secret detection (Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- üê≥ Container image vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- ‚öôÔ∏è Configuration scanning (Dockerfile)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚òÅÔ∏è IaC scanning (Terraform + Kubernetes)" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è Policy validation (Checkov)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the uploaded artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY

      # NOTIFICATION ON FAILURE
      - name: Security scan failed
        if: failure()
        run: |
          echo "‚ùå Security scan detected CRITICAL or HIGH vulnerabilities!"
          echo "Review the artifacts for detailed findings."
          exit 1
